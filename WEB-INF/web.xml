<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				 xmlns="http://java.sun.com/xml/ns/javaee"
				 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
				 version="3.0">

	<!-- 区分项目名称，防止默认重名  -->
<!-- 	<context-param> -->
<!-- 		<param-name>webAppRootKey</param-name> -->
<!-- 		<param-value>maven.sysdemo.root</param-value> -->
<!-- 	</context-param> -->

	<!-- Spring的log4j监听器  -->
<!-- 	<listener> -->
<!-- 		<listener-class>org.springframework.web.util.Log4jConfigListener -->
<!-- 		</listener-class> -->
<!-- 	</listener> -->
	<filter>
		<filter-name>OpenSessionInView</filter-name>
		<filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>OpenSessionInView</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 字符集 过滤器   -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
		<!-- 验证码过滤器开始 -->
		<filter>
		   <filter-name>CodeFilter</filter-name>
		   <filter-class>com.ienc.common.login.security.VerificationCodeFilter</filter-class>
		</filter>
		<filter-mapping>
		   <filter-name>CodeFilter</filter-name>
		   <url-pattern>/j_spring_security_check</url-pattern>
		</filter-mapping>
	<!-- 验证码过滤器结束 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 设置Spring容器加载配置文件路径  -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring-configuration/applicationContext-*.xml
		</param-value>
	</context-param>
	<!-- Spring view分发器  -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-configuration/applicationContext-mvc.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.jspx</url-pattern>
		<!--拦截/*，这是一个错误的方式，请求可以走到Action中，但转到jsp时再次被拦截，不能访问到jsp。  拦截/，restful风格 弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。解决办法看dispatcher -->
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.jhtml</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/h.js</url-pattern>
	</servlet-mapping>
	
	<!-- Spring会创建一个WebApplicationContext上下文，称为父上下文（父容器） ，保存在 ServletContext中，key是WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE的值。 
		可以使用Spring提供的工具类取出上下文对象：WebApplicationContextUtils.getWebApplicationContext(ServletContext); 
		   DispatcherServlet是一个Servlet,可以同时配置多个，每个 DispatcherServlet有一个自己的上下文对象（WebApplicationContext），称为子上下文（子容器），子上下文可以访问父上下文中的内容， 
		但父上下文不能访问子上下文中的内容。 它也保存在 ServletContext中，key是"org.springframework.web.servlet.FrameworkServlet.CONTEXT"+Servlet名称。当一个Request对象产生时， 
		会把这个子上下文对象（WebApplicationContext）保存在Request对象中，key是DispatcherServlet.class.getName() + ".CONTEXT"。 
		可以使用工具类取出上下文对象：RequestContextUtils.getWebApplicationContext(request); -->
	<!-- 验证码开始 -->
	<servlet>
		<servlet-name>Kaptcha</servlet-name>
		<servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>

		<!--
			For a complete list of Init Parameters, please see:
			http://code.google.com/p/kaptcha/wiki/ConfigParameters
		-->
		<init-param>
			<param-name>kaptcha.border</param-name>
			<param-value>no</param-value>
		</init-param>

		<init-param>
			<param-name>kaptcha.textproducer.font.color</param-name>
			<param-value>black</param-value>
		</init-param>

		<init-param>
			<param-name>kaptcha.textproducer.char.space</param-name>
			<param-value>5</param-value>
		</init-param>
		<init-param>
			<param-name>kaptcha.textproducer.char.length</param-name>
			<param-value>4</param-value>
		</init-param>
		<init-param>
			<param-name>kaptcha.textproducer.char.string</param-name>
			<param-value>1234567890</param-value>
		</init-param>

	</servlet>

	<servlet-mapping>
		<servlet-name>Kaptcha</servlet-name>
		<url-pattern>/Kaptcha.jpg</url-pattern>
	</servlet-mapping>
	<!-- 验证码结束 -->
	
	<!-- 添加CSF filter begin-->
	<filter>
		<filter-name>csfFilter</filter-name>
		<filter-class>com.ienc.common.filters.CSPFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>csfFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 添加CSF filter end-->

	<!-- 添加Method filter begin-->
	<filter>
		<filter-name>methodFilter</filter-name>
		<filter-class>com.ienc.common.filters.MethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>methodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 添加Method filter end-->
	
	<!-- 添加xss filter begin-->
	<filter>
		<filter-name>xssFilter</filter-name>
		<filter-class>com.ienc.common.xss.XssFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>xssFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 添加xss filter end-->
	
	<!-- Spring的log4j监听器****************************************** -->
	<!-- 设置log4j配置文件路径 -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	<!-- 开一条watchdog线程每60秒扫描一下配置文件的变化 -->
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>600000</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener> 
	<!-- ************************************************** -->
	<listener>
		<listener-class>
			com.ienc.common.app.listenner.MyContextLoaderListener
		</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener
		</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher
		</listener-class>
	</listener>
	
	<listener>
		<listener-class>com.ienc.common.sso.LoginListener</listener-class>
	</listener>
	
	<welcome-file-list>
		<welcome-file>/index.jhtml</welcome-file>
	</welcome-file-list>
		<mime-mapping>  
    <extension>js</extension>  
    <mime-type>application/x-javascript</mime-type>  
	</mime-mapping> 
	<mime-mapping>  
	    <extension>png</extension>  
	    <mime-type>image/png</mime-type>  
	</mime-mapping>
</web-app>
